// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  HOST
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  password      String?
  image         String?
  phone         String?
  emailVerified DateTime?
  role          Role      @default(GUEST)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  listings Listing[]
  bookings Booking[]
  accounts Account[] // Added for NextAuth external providers
  sessions Session[] // Added for NextAuth sessions
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Listing {
  id             String     @id @default(cuid())
  title          String
  description    String
  location       String
  pricePerNight  Float
  images         String[] // Cloudinary URLs
  amenities      String[] // ["Wifi", "Kitchen", ...]
  houseRules     String?
  availableDates DateTime[] // ["2025-07-10", "2025-07-11"]
  beds           Int        @default(1)
  adults         Int        @default(1) // Maximum adults allowed
  children       Int        @default(0) // Maximum children allowed
  rooms          Int        @default(1) // Number of rooms/bedrooms
  hostId         String
  host           User       @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings       Booking[]
  createdAt      DateTime   @default(now())
}

model Booking {
  id         String   @id @default(uuid())
  checkIn    DateTime
  checkOut   DateTime
  totalPrice Float
  createdAt  DateTime @default(now())

  guestId String
  guest   User   @relation(fields: [guestId], references: [id], onDelete: Cascade)

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])
}
